# Реализуйте структуру данных «очередь». Напишите программу, содержащую описание очереди
# и моделирующую работу очереди, реализовав все указанные здесь методы. Программа считывает
# последовательность команд и в зависимости от команды выполняет ту или иную операцию. После
# выполнения каждой команды программа должна вывести одну строчку. Возможные команды для
# программы:
# • push n Добавить в очередь число n (значение n задается после команды). Программа должна
# вывести «ok».
# • pop Удалить из очереди первый элемент. Программа должна вывести его значение.
# • front Программа должна вывести значение первого элемента, не удаляя его из очереди.
# • size Программа должна вывести количество элементов в очереди.
# • clearПрограмма должна очистить очередь и вывести «ok».
# • exit Программа должна вывести «bye» и завершить работу.
# Гарантируется, что набор входных команд удовлетворяет следующим требованиям: максимальное количество элементов в очереди в любой момент не превосходит 100, все команды pop и front
# корректны, то есть при их исполнении в очереди содержится хотя бы один элемент.
#

stek = []
i = input()
while i != 'exit':
    if i.split()[0] == 'push':
        stek.append(i.split()[1])
        print('ok')
    if i == 'size':
        print(len(stek))
    if i == 'clear':
        stek.clear()
        print('ok')
    if i == 'front':
        print(stek[0])
    if i == 'pop':
        print(stek[0])
        stek.pop(0)
    i = input()
print('bye')

